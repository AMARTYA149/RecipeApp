{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { isObject } from '../typechecker/IsObject';\nexport const IS_NOT_EMPTY_OBJECT = 'isNotEmptyObject';\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\n\nexport function isNotEmptyObject(value, options) {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  if ((options === null || options === void 0 ? void 0 : options.nullable) === true) {\n    return !Object.values(value).every(propertyValue => propertyValue === null || propertyValue === undefined);\n  }\n\n  for (const key in value) {\n    if (value.hasOwnProperty(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\n\nexport function IsNotEmptyObject(options, validationOptions) {\n  return ValidateBy({\n    name: IS_NOT_EMPTY_OBJECT,\n    constraints: [options],\n    validator: {\n      validate: (value, args) => isNotEmptyObject(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a non-empty object', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsNotEmptyObject.js.map","map":null,"metadata":{},"sourceType":"module"}