{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Controller = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @param prefixOrOptions a `route path prefix` or a `ControllerOptions` object.\n * A `route path prefix` is pre-pended to the path specified in any request decorator\n * in the class. `ControllerOptions` is an options configuration object specifying:\n * - `scope` - symbol that determines the lifetime of a Controller instance.\n * [See Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage) for\n * more details.\n * - `prefix` - string that defines a `route path prefix`.  The prefix\n * is pre-pended to the path specified in any request decorator in the class.\n * - `version` - string, array of strings, or Symbol that defines the version\n * of all routes in the class. [See Versioning](https://docs.nestjs.com/techniques/versioning)\n * for more details.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n * @see [Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage)\n * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\n *\n * @publicApi\n */\n\n\nfunction Controller(prefixOrOptions) {\n  const defaultPath = '/';\n  const [path, host, scopeOptions, versionOptions] = (0, shared_utils_1.isUndefined)(prefixOrOptions) ? [defaultPath, undefined, undefined, undefined] : (0, shared_utils_1.isString)(prefixOrOptions) || Array.isArray(prefixOrOptions) ? [prefixOrOptions, undefined, undefined, undefined] : [prefixOrOptions.path || defaultPath, prefixOrOptions.host, {\n    scope: prefixOrOptions.scope\n  }, Array.isArray(prefixOrOptions.version) ? Array.from(new Set(prefixOrOptions.version)) : prefixOrOptions.version];\n  return target => {\n    Reflect.defineMetadata(constants_1.CONTROLLER_WATERMARK, true, target);\n    Reflect.defineMetadata(constants_1.PATH_METADATA, path, target);\n    Reflect.defineMetadata(constants_1.HOST_METADATA, host, target);\n    Reflect.defineMetadata(constants_1.SCOPE_OPTIONS_METADATA, scopeOptions, target);\n    Reflect.defineMetadata(constants_1.VERSION_METADATA, versionOptions, target);\n  };\n}\n\nexports.Controller = Controller;","map":null,"metadata":{},"sourceType":"script"}