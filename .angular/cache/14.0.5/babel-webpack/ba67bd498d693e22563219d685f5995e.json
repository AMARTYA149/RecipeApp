{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/amartya_aishwarya/Desktop/nextjs-angular/RecipeApp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseBoolPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\n\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseBool Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\n\nlet ParseBoolPipe = class ParseBoolPipe {\n  constructor(options) {\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  transform(value, metadata) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.isTrue(value)) {\n        return true;\n      }\n\n      if (_this.isFalse(value)) {\n        return false;\n      }\n\n      throw _this.exceptionFactory('Validation failed (boolean string is expected)');\n    })();\n  }\n  /**\n   * @param value currently processed route argument\n   * @returns `true` if `value` is said 'true', ie., if it is equal to the boolean\n   * `true` or the string `\"true\"`\n   */\n\n\n  isTrue(value) {\n    return value === true || value === 'true';\n  }\n  /**\n   * @param value currently processed route argument\n   * @returns `true` if `value` is said 'false', ie., if it is equal to the boolean\n   * `false` or the string `\"false\"`\n   */\n\n\n  isFalse(value) {\n    return value === false || value === 'false';\n  }\n\n};\nParseBoolPipe = tslib_1.__decorate([(0, injectable_decorator_1.Injectable)(), tslib_1.__param(0, (0, optional_decorator_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseBoolPipe);\nexports.ParseBoolPipe = ParseBoolPipe;","map":null,"metadata":{},"sourceType":"script"}