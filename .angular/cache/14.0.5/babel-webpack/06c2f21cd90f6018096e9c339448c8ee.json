{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PipesContextCreator = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst context_creator_1 = require(\"../helpers/context-creator\");\n\nconst constants_2 = require(\"../injector/constants\");\n\nclass PipesContextCreator extends context_creator_1.ContextCreator {\n  constructor(container, config) {\n    super();\n    this.container = container;\n    this.config = config;\n  }\n\n  create(instance, callback, moduleKey, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    this.moduleContext = moduleKey;\n    return this.createContext(instance, callback, constants_1.PIPES_METADATA, contextId, inquirerId);\n  }\n\n  createConcreteContext(metadata, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if ((0, shared_utils_1.isEmpty)(metadata)) {\n      return [];\n    }\n\n    return (0, iterare_1.iterate)(metadata).filter(pipe => pipe && (pipe.name || pipe.transform)).map(pipe => this.getPipeInstance(pipe, contextId, inquirerId)).filter(pipe => pipe && pipe.transform && (0, shared_utils_1.isFunction)(pipe.transform)).toArray();\n  }\n\n  getPipeInstance(pipe, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    const isObject = pipe.transform;\n\n    if (isObject) {\n      return pipe;\n    }\n\n    const instanceWrapper = this.getInstanceByMetatype(pipe);\n\n    if (!instanceWrapper) {\n      return null;\n    }\n\n    const instanceHost = instanceWrapper.getInstanceByContextId(contextId, inquirerId);\n    return instanceHost && instanceHost.instance;\n  }\n\n  getInstanceByMetatype(metatype) {\n    if (!this.moduleContext) {\n      return;\n    }\n\n    const collection = this.container.getModules();\n    const moduleRef = collection.get(this.moduleContext);\n\n    if (!moduleRef) {\n      return;\n    }\n\n    return moduleRef.injectables.get(metatype);\n  }\n\n  getGlobalMetadata(contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if (!this.config) {\n      return [];\n    }\n\n    const globalPipes = this.config.getGlobalPipes();\n\n    if (contextId === constants_2.STATIC_CONTEXT && !inquirerId) {\n      return globalPipes;\n    }\n\n    const scopedPipeWrappers = this.config.getGlobalRequestPipes();\n    const scopedPipes = (0, iterare_1.iterate)(scopedPipeWrappers).map(wrapper => wrapper.getInstanceByContextId(contextId, inquirerId)).filter(host => !!host).map(host => host.instance).toArray();\n    return globalPipes.concat(scopedPipes);\n  }\n\n  setModuleContext(context) {\n    this.moduleContext = context;\n  }\n\n}\n\nexports.PipesContextCreator = PipesContextCreator;","map":null,"metadata":{},"sourceType":"script"}