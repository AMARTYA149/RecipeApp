{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUuidValidator from 'validator/lib/isUUID';\nexport const IS_UUID = 'isUuid';\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n */\n\nexport function isUUID(value, version) {\n  return typeof value === 'string' && isUuidValidator(value, version);\n}\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n */\n\nexport function IsUUID(version, validationOptions) {\n  return ValidateBy({\n    name: IS_UUID,\n    constraints: [version],\n    validator: {\n      validate: (value, args) => isUUID(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a UUID', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsUUID.js.map","map":null,"metadata":{},"sourceType":"module"}