{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_NUMBER = 'isNumber';\n/**\n * Checks if a given value is a number.\n */\n\nexport function isNumber(value, options = {}) {\n  if (typeof value !== 'number') {\n    return false;\n  }\n\n  if (value === Infinity || value === -Infinity) {\n    return options.allowInfinity;\n  }\n\n  if (Number.isNaN(value)) {\n    return options.allowNaN;\n  }\n\n  if (options.maxDecimalPlaces !== undefined) {\n    let decimalPlaces = 0;\n\n    if (value % 1 !== 0) {\n      decimalPlaces = value.toString().split('.')[1].length;\n    }\n\n    if (decimalPlaces > options.maxDecimalPlaces) {\n      return false;\n    }\n  }\n\n  return Number.isFinite(value);\n}\n/**\n * Checks if a value is a number.\n */\n\nexport function IsNumber(options = {}, validationOptions) {\n  return ValidateBy({\n    name: IS_NUMBER,\n    constraints: [options],\n    validator: {\n      validate: (value, args) => isNumber(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a number conforming to the specified constraints', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsNumber.js.map","map":null,"metadata":{},"sourceType":"module"}