{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestTimeoutException = void 0;\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_exception_1 = require(\"./http.exception\");\n/**\n * Defines an HTTP exception for *Request Timeout* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\n\n\nclass RequestTimeoutException extends http_exception_1.HttpException {\n  /**\n   * Instantiate a `RequestTimeoutException` Exception.\n   *\n   * @example\n   * `throw new RequestTimeoutException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 408.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 408.\n   * - `message`: the string `'Request Timeout'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(objectOrError, description = 'Request Timeout') {\n    super(http_exception_1.HttpException.createBody(objectOrError, description, http_status_enum_1.HttpStatus.REQUEST_TIMEOUT), http_status_enum_1.HttpStatus.REQUEST_TIMEOUT);\n  }\n\n}\n\nexports.RequestTimeoutException = RequestTimeoutException;","map":null,"metadata":{},"sourceType":"script"}