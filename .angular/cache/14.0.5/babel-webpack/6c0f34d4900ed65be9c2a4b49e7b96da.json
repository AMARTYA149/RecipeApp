{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMultibyteValidator from 'validator/lib/isMultibyte';\nexport const IS_MULTIBYTE = 'isMultibyte';\n/**\n * Checks if the string contains one or more multibyte chars.\n * If given value is not a string, then it returns false.\n */\n\nexport function isMultibyte(value) {\n  return typeof value === 'string' && isMultibyteValidator(value);\n}\n/**\n * Checks if the string contains one or more multibyte chars.\n * If given value is not a string, then it returns false.\n */\n\nexport function IsMultibyte(validationOptions) {\n  return ValidateBy({\n    name: IS_MULTIBYTE,\n    validator: {\n      validate: (value, args) => isMultibyte(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must contain one or more multibyte chars', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsMultibyte.js.map","map":null,"metadata":{},"sourceType":"module"}