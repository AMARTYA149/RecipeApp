{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExceptionsHandler = void 0;\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst invalid_exception_filter_exception_1 = require(\"../errors/exceptions/invalid-exception-filter.exception\");\n\nconst base_exception_filter_1 = require(\"./base-exception-filter\");\n\nclass ExceptionsHandler extends base_exception_filter_1.BaseExceptionFilter {\n  constructor() {\n    super(...arguments);\n    this.filters = [];\n  }\n\n  next(exception, ctx) {\n    if (this.invokeCustomFilters(exception, ctx)) {\n      return;\n    }\n\n    super.catch(exception, ctx);\n  }\n\n  setCustomFilters(filters) {\n    if (!Array.isArray(filters)) {\n      throw new invalid_exception_filter_exception_1.InvalidExceptionFilterException();\n    }\n\n    this.filters = filters;\n  }\n\n  invokeCustomFilters(exception, ctx) {\n    if ((0, shared_utils_1.isEmpty)(this.filters)) {\n      return false;\n    }\n\n    const isInstanceOf = metatype => exception instanceof metatype;\n\n    const filter = this.filters.find(({\n      exceptionMetatypes\n    }) => {\n      const typeExists = !exceptionMetatypes.length || exceptionMetatypes.some(isInstanceOf);\n      return typeExists;\n    });\n    filter && filter.func(exception, ctx);\n    return !!filter;\n  }\n\n}\n\nexports.ExceptionsHandler = ExceptionsHandler;","map":null,"metadata":{},"sourceType":"script"}