{"ast":null,"code":"/**\n * Validation error description.\n */\nexport class ValidationError {\n  /**\n   *\n   * @param shouldDecorate decorate the message with ANSI formatter escape codes for better readability\n   * @param hasParent true when the error is a child of an another one\n   * @param parentPath path as string to the parent of this property\n   */\n  toString(shouldDecorate = false, hasParent = false, parentPath = ``) {\n    const boldStart = shouldDecorate ? `\\x1b[1m` : ``;\n    const boldEnd = shouldDecorate ? `\\x1b[22m` : ``;\n\n    const propConstraintFailed = propertyName => ` - property ${boldStart}${parentPath}${propertyName}${boldEnd} has failed the following constraints: ${boldStart}${Object.keys(this.constraints).join(`, `)}${boldEnd} \\n`;\n\n    if (!hasParent) {\n      return `An instance of ${boldStart}${this.target ? this.target.constructor.name : 'an object'}${boldEnd} has failed the validation:\\n` + (this.constraints ? propConstraintFailed(this.property) : ``) + (this.children ? this.children.map(childError => childError.toString(shouldDecorate, true, this.property)).join(``) : ``);\n    } else {\n      // we format numbers as array indexes for better readability.\n      const formattedProperty = Number.isInteger(+this.property) ? `[${this.property}]` : `${parentPath ? `.` : ``}${this.property}`;\n\n      if (this.constraints) {\n        return propConstraintFailed(formattedProperty);\n      } else {\n        return this.children ? this.children.map(childError => childError.toString(shouldDecorate, true, `${parentPath}${formattedProperty}`)).join(``) : ``;\n      }\n    }\n  }\n\n} //# sourceMappingURL=ValidationError.js.map","map":null,"metadata":{},"sourceType":"module"}