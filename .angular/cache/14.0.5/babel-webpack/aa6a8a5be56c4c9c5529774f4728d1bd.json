{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExceptionFilterContext = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst context_creator_1 = require(\"../helpers/context-creator\");\n\nconst constants_2 = require(\"../injector/constants\");\n\nclass BaseExceptionFilterContext extends context_creator_1.ContextCreator {\n  constructor(container) {\n    super();\n    this.container = container;\n  }\n\n  createConcreteContext(metadata, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if ((0, shared_utils_1.isEmpty)(metadata)) {\n      return [];\n    }\n\n    return (0, iterare_1.iterate)(metadata).filter(instance => instance && ((0, shared_utils_1.isFunction)(instance.catch) || instance.name)).map(filter => this.getFilterInstance(filter, contextId, inquirerId)).filter(item => !!item).map(instance => ({\n      func: instance.catch.bind(instance),\n      exceptionMetatypes: this.reflectCatchExceptions(instance)\n    })).toArray();\n  }\n\n  getFilterInstance(filter, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    const isObject = filter.catch;\n\n    if (isObject) {\n      return filter;\n    }\n\n    const instanceWrapper = this.getInstanceByMetatype(filter);\n\n    if (!instanceWrapper) {\n      return null;\n    }\n\n    const instanceHost = instanceWrapper.getInstanceByContextId(contextId, inquirerId);\n    return instanceHost && instanceHost.instance;\n  }\n\n  getInstanceByMetatype(metatype) {\n    if (!this.moduleContext) {\n      return;\n    }\n\n    const collection = this.container.getModules();\n    const moduleRef = collection.get(this.moduleContext);\n\n    if (!moduleRef) {\n      return;\n    }\n\n    return moduleRef.injectables.get(metatype);\n  }\n\n  reflectCatchExceptions(instance) {\n    const prototype = Object.getPrototypeOf(instance);\n    return Reflect.getMetadata(constants_1.FILTER_CATCH_EXCEPTIONS, prototype.constructor) || [];\n  }\n\n}\n\nexports.BaseExceptionFilterContext = BaseExceptionFilterContext;","map":null,"metadata":{},"sourceType":"script"}