{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMiddlewareRouteExcluded = exports.assignToken = exports.isMiddlewareClass = exports.mapToClass = exports.filterMiddleware = exports.mapToExcludeRoute = void 0;\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst pathToRegexp = require(\"path-to-regexp\");\n\nconst uuid_1 = require(\"uuid\");\n\nconst utils_1 = require(\"../router/utils\");\n\nconst mapToExcludeRoute = routes => {\n  return routes.map(({\n    path,\n    method\n  }) => ({\n    pathRegex: pathToRegexp(path),\n    requestMethod: method\n  }));\n};\n\nexports.mapToExcludeRoute = mapToExcludeRoute;\n\nconst filterMiddleware = (middleware, routes, httpAdapter) => {\n  const excludedRoutes = (0, exports.mapToExcludeRoute)(routes);\n  return (0, iterare_1.iterate)([]).concat(middleware).filter(shared_utils_1.isFunction).map(item => (0, exports.mapToClass)(item, excludedRoutes, httpAdapter)).toArray();\n};\n\nexports.filterMiddleware = filterMiddleware;\n\nconst mapToClass = (middleware, excludedRoutes, httpAdapter) => {\n  if (isMiddlewareClass(middleware)) {\n    if (excludedRoutes.length <= 0) {\n      return middleware;\n    }\n\n    const MiddlewareHost = class extends middleware {\n      use(...params) {\n        const [req, _, next] = params;\n        const isExcluded = isMiddlewareRouteExcluded(req, excludedRoutes, httpAdapter);\n\n        if (isExcluded) {\n          return next();\n        }\n\n        return super.use(...params);\n      }\n\n    };\n    return assignToken(MiddlewareHost, middleware.name);\n  }\n\n  return assignToken(class {\n    constructor() {\n      this.use = (...params) => {\n        const [req, _, next] = params;\n        const isExcluded = isMiddlewareRouteExcluded(req, excludedRoutes, httpAdapter);\n\n        if (isExcluded) {\n          return next();\n        }\n\n        return middleware(...params);\n      };\n    }\n\n  });\n};\n\nexports.mapToClass = mapToClass;\n\nfunction isMiddlewareClass(middleware) {\n  var _a, _b;\n\n  const middlewareStr = middleware.toString();\n\n  if (middlewareStr.substring(0, 5) === 'class') {\n    return true;\n  }\n\n  const middlewareArr = middlewareStr.split(' ');\n  return middlewareArr[0] === 'function' && /[A-Z]/.test((_a = middlewareArr[1]) === null || _a === void 0 ? void 0 : _a[0]) && (0, shared_utils_1.isFunction)((_b = middleware.prototype) === null || _b === void 0 ? void 0 : _b.use);\n}\n\nexports.isMiddlewareClass = isMiddlewareClass;\n\nfunction assignToken(metatype, token = (0, uuid_1.v4)()) {\n  Object.defineProperty(metatype, 'name', {\n    value: token\n  });\n  return metatype;\n}\n\nexports.assignToken = assignToken;\n\nfunction isMiddlewareRouteExcluded(req, excludedRoutes, httpAdapter) {\n  if (excludedRoutes.length <= 0) {\n    return false;\n  }\n\n  const reqMethod = httpAdapter.getRequestMethod(req);\n  const originalUrl = httpAdapter.getRequestUrl(req);\n  const queryParamsIndex = originalUrl && originalUrl.indexOf('?');\n  const pathname = queryParamsIndex >= 0 ? originalUrl.slice(0, queryParamsIndex) : originalUrl;\n  return (0, utils_1.isRouteExcluded)(excludedRoutes, pathname, common_1.RequestMethod[reqMethod]);\n}\n\nexports.isMiddlewareRouteExcluded = isMiddlewareRouteExcluded;","map":null,"metadata":{},"sourceType":"script"}