{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UsePipes = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds pipes to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UsePipes` is used at the controller level, the pipe will be\n * applied to every handler (method) in the controller.\n *\n * When `@UsePipes` is used at the individual handler level, the pipe\n * will apply only to that specific method.\n *\n * @param pipes a single pipe instance or class, or a list of pipe instances or\n * classes.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @usageNotes\n * Pipes can also be set up globally for all controllers and routes\n * using `app.useGlobalPipes()`.  [See here for details](https://docs.nestjs.com/pipes#class-validator)\n *\n * @publicApi\n */\n\n\nfunction UsePipes(...pipes) {\n  return (target, key, descriptor) => {\n    const isPipeValid = pipe => pipe && ((0, shared_utils_1.isFunction)(pipe) || (0, shared_utils_1.isFunction)(pipe.transform));\n\n    if (descriptor) {\n      (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.PIPES_METADATA, pipes, descriptor.value);\n      return descriptor;\n    }\n\n    (0, validate_each_util_1.validateEach)(target, pipes, isPipeValid, '@UsePipes', 'pipe');\n    (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.PIPES_METADATA, pipes, target);\n    return target;\n  };\n}\n\nexports.UsePipes = UsePipes;","map":null,"metadata":{},"sourceType":"script"}