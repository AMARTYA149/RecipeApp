{"ast":null,"code":"import { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container'; // -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\n\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n/**\n * Validates given object by object's decorators or given validation schema.\n */\n\nexport function validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\n\nexport function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\n\nexport function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Registers a new validation schema.\n */\n\nexport function registerSchema(schema) {\n  getMetadataStorage().addValidationSchema(schema);\n} //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}