{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstanceLinksHost = void 0;\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst unknown_element_exception_1 = require(\"../errors/exceptions/unknown-element.exception\");\n\nclass InstanceLinksHost {\n  constructor(container) {\n    this.container = container;\n    this.instanceLinks = new Map();\n    this.initialize();\n  }\n\n  get(token, moduleId) {\n    const modulesMap = this.instanceLinks.get(token);\n\n    if (!modulesMap) {\n      throw new unknown_element_exception_1.UnknownElementException(this.getInstanceNameByToken(token));\n    }\n\n    const instanceLink = moduleId ? modulesMap.find(item => item.moduleId === moduleId) : modulesMap[modulesMap.length - 1];\n\n    if (!instanceLink) {\n      throw new unknown_element_exception_1.UnknownElementException(this.getInstanceNameByToken(token));\n    }\n\n    return instanceLink;\n  }\n\n  initialize() {\n    const modules = this.container.getModules();\n    modules.forEach(moduleRef => {\n      const {\n        providers,\n        injectables,\n        controllers\n      } = moduleRef;\n      providers.forEach((wrapper, token) => this.addLink(wrapper, token, moduleRef, 'providers'));\n      injectables.forEach((wrapper, token) => this.addLink(wrapper, token, moduleRef, 'injectables'));\n      controllers.forEach((wrapper, token) => this.addLink(wrapper, token, moduleRef, 'controllers'));\n    });\n  }\n\n  addLink(wrapper, token, moduleRef, collectionName) {\n    const instanceLink = {\n      moduleId: moduleRef.id,\n      wrapperRef: wrapper,\n      collection: moduleRef[collectionName],\n      token\n    };\n    const existingLinks = this.instanceLinks.get(token);\n\n    if (!existingLinks) {\n      this.instanceLinks.set(token, [instanceLink]);\n    } else {\n      existingLinks.push(instanceLink);\n    }\n  }\n\n  getInstanceNameByToken(token) {\n    return (0, shared_utils_1.isFunction)(token) ? token === null || token === void 0 ? void 0 : token.name : token;\n  }\n\n}\n\nexports.InstanceLinksHost = InstanceLinksHost;","map":null,"metadata":{},"sourceType":"script"}