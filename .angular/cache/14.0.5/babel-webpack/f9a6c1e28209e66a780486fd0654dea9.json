{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIdentityCardValidator from 'validator/lib/isIdentityCard';\nexport const IS_IDENTITY_CARD = 'isIdentityCard';\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\n\nexport function isIdentityCard(value, locale) {\n  return typeof value === 'string' && isIdentityCardValidator(value, locale);\n}\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\n\nexport function IsIdentityCard(locale, validationOptions) {\n  return ValidateBy({\n    name: IS_IDENTITY_CARD,\n    constraints: [locale],\n    validator: {\n      validate: (value, args) => isIdentityCard(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a identity card number', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsIdentityCard.js.map","map":null,"metadata":{},"sourceType":"module"}