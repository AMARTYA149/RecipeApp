{"ast":null,"code":"import { ValidationExecutor } from './ValidationExecutor';\n/**\n * Validator performs validation of the given object based on its metadata.\n */\n\nexport class Validator {\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n  }\n  /**\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\n   */\n\n\n  async validateOrReject(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    if (errors.length) return Promise.reject(errors);\n  }\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n\n\n  validateSync(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    const object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    const options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    const executor = new ValidationExecutor(this, options);\n    executor.ignoreAsyncValidations = true;\n    const validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return executor.stripEmptyErrors(validationErrors);\n  } // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   * Common method for `validateOrReject` and `validate` methods.\n   */\n\n\n  coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    const object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    const options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    const executor = new ValidationExecutor(this, options);\n    const validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return Promise.all(executor.awaitingPromises).then(() => {\n      return executor.stripEmptyErrors(validationErrors);\n    });\n  }\n\n} //# sourceMappingURL=Validator.js.map","map":null,"metadata":{},"sourceType":"module"}