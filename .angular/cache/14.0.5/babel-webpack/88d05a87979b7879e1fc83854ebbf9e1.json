{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClassSerializerInterceptor = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst core_1 = require(\"../decorators/core\");\n\nconst file_stream_1 = require(\"../file-stream\");\n\nconst load_package_util_1 = require(\"../utils/load-package.util\");\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n\nconst class_serializer_constants_1 = require(\"./class-serializer.constants\");\n\nlet classTransformer = {}; // NOTE (external)\n// We need to deduplicate them here due to the circular dependency\n// between core and common packages\n\nconst REFLECTOR = 'Reflector';\nlet ClassSerializerInterceptor = class ClassSerializerInterceptor {\n  constructor(reflector, defaultOptions = {}) {\n    var _a;\n\n    this.reflector = reflector;\n    this.defaultOptions = defaultOptions;\n    classTransformer = (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.transformerPackage) !== null && _a !== void 0 ? _a : (0, load_package_util_1.loadPackage)('class-transformer', 'ClassSerializerInterceptor', () => require('class-transformer'));\n\n    if (!(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.transformerPackage)) {\n      require('class-transformer');\n    }\n  }\n\n  intercept(context, next) {\n    const contextOptions = this.getContextOptions(context);\n    const options = Object.assign(Object.assign({}, this.defaultOptions), contextOptions);\n    return next.handle().pipe((0, operators_1.map)(res => this.serialize(res, options)));\n  }\n  /**\n   * Serializes responses that are non-null objects nor streamable files.\n   */\n\n\n  serialize(response, options) {\n    if (!(0, shared_utils_1.isObject)(response) || response instanceof file_stream_1.StreamableFile) {\n      return response;\n    }\n\n    return Array.isArray(response) ? response.map(item => this.transformToPlain(item, options)) : this.transformToPlain(response, options);\n  }\n\n  transformToPlain(plainOrClass, options) {\n    return plainOrClass ? classTransformer.classToPlain(plainOrClass, options) : plainOrClass;\n  }\n\n  getContextOptions(context) {\n    return this.reflectSerializeMetadata(context.getHandler()) || this.reflectSerializeMetadata(context.getClass());\n  }\n\n  reflectSerializeMetadata(obj) {\n    return this.reflector.get(class_serializer_constants_1.CLASS_SERIALIZER_OPTIONS, obj);\n  }\n\n};\nClassSerializerInterceptor = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, core_1.Inject)(REFLECTOR)), tslib_1.__param(1, (0, core_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object, Object])], ClassSerializerInterceptor);\nexports.ClassSerializerInterceptor = ClassSerializerInterceptor;","map":null,"metadata":{},"sourceType":"script"}