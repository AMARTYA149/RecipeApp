{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\nexport const IS_LENGTH = 'isLength';\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\n\nexport function length(value, min, max) {\n  return typeof value === 'string' && isLengthValidator(value, {\n    min,\n    max\n  });\n}\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\n\nexport function Length(min, max, validationOptions) {\n  return ValidateBy({\n    name: IS_LENGTH,\n    constraints: [min, max],\n    validator: {\n      validate: (value, args) => length(value, args.constraints[0], args.constraints[1]),\n      defaultMessage: buildMessage((eachPrefix, args) => {\n        const isMinLength = args.constraints[0] !== null && args.constraints[0] !== undefined;\n        const isMaxLength = args.constraints[1] !== null && args.constraints[1] !== undefined;\n\n        if (isMinLength && (!args.value || args.value.length < args.constraints[0])) {\n          return eachPrefix + '$property must be longer than or equal to $constraint1 characters';\n        } else if (isMaxLength && args.value.length > args.constraints[1]) {\n          return eachPrefix + '$property must be shorter than or equal to $constraint2 characters';\n        }\n\n        return eachPrefix + '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters';\n      }, validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=Length.js.map","map":null,"metadata":{},"sourceType":"module"}