{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InterceptorsContextCreator = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst context_creator_1 = require(\"../helpers/context-creator\");\n\nconst constants_2 = require(\"../injector/constants\");\n\nclass InterceptorsContextCreator extends context_creator_1.ContextCreator {\n  constructor(container, config) {\n    super();\n    this.container = container;\n    this.config = config;\n  }\n\n  create(instance, callback, module, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    this.moduleContext = module;\n    return this.createContext(instance, callback, constants_1.INTERCEPTORS_METADATA, contextId, inquirerId);\n  }\n\n  createConcreteContext(metadata, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if ((0, shared_utils_1.isEmpty)(metadata)) {\n      return [];\n    }\n\n    return (0, iterare_1.iterate)(metadata).filter(interceptor => interceptor && (interceptor.name || interceptor.intercept)).map(interceptor => this.getInterceptorInstance(interceptor, contextId, inquirerId)).filter(interceptor => interceptor && (0, shared_utils_1.isFunction)(interceptor.intercept)).toArray();\n  }\n\n  getInterceptorInstance(metatype, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    const isObject = metatype.intercept;\n\n    if (isObject) {\n      return metatype;\n    }\n\n    const instanceWrapper = this.getInstanceByMetatype(metatype);\n\n    if (!instanceWrapper) {\n      return null;\n    }\n\n    const instanceHost = instanceWrapper.getInstanceByContextId(contextId, inquirerId);\n    return instanceHost && instanceHost.instance;\n  }\n\n  getInstanceByMetatype(metatype) {\n    if (!this.moduleContext) {\n      return;\n    }\n\n    const collection = this.container.getModules();\n    const moduleRef = collection.get(this.moduleContext);\n\n    if (!moduleRef) {\n      return;\n    }\n\n    return moduleRef.injectables.get(metatype);\n  }\n\n  getGlobalMetadata(contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if (!this.config) {\n      return [];\n    }\n\n    const globalInterceptors = this.config.getGlobalInterceptors();\n\n    if (contextId === constants_2.STATIC_CONTEXT && !inquirerId) {\n      return globalInterceptors;\n    }\n\n    const scopedInterceptorWrappers = this.config.getGlobalRequestInterceptors();\n    const scopedInterceptors = (0, iterare_1.iterate)(scopedInterceptorWrappers).map(wrapper => wrapper.getInstanceByContextId(contextId, inquirerId)).filter(host => !!host).map(host => host.instance).toArray();\n    return globalInterceptors.concat(scopedInterceptors);\n  }\n\n}\n\nexports.InterceptorsContextCreator = InterceptorsContextCreator;","map":null,"metadata":{},"sourceType":"script"}