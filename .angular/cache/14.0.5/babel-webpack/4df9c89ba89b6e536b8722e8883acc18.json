{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js';\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\n\nexport function isPhoneNumber(value, region) {\n  try {\n    const phoneNum = parsePhoneNumberFromString(value, region);\n    const result = phoneNum === null || phoneNum === void 0 ? void 0 : phoneNum.isValid();\n    return !!result;\n  } catch (error) {\n    // logging?\n    return false;\n  }\n}\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\n\nexport function IsPhoneNumber(region, validationOptions) {\n  return ValidateBy({\n    name: IS_PHONE_NUMBER,\n    constraints: [region],\n    validator: {\n      validate: (value, args) => isPhoneNumber(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid phone number', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsPhoneNumber.js.map","map":null,"metadata":{},"sourceType":"module"}