{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RoutesMapper = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst metadata_scanner_1 = require(\"../metadata-scanner\");\n\nconst router_explorer_1 = require(\"../router/router-explorer\");\n\nconst router_module_1 = require(\"../router/router-module\");\n\nclass RoutesMapper {\n  constructor(container) {\n    this.container = container;\n    this.routerExplorer = new router_explorer_1.RouterExplorer(new metadata_scanner_1.MetadataScanner(), container);\n  }\n\n  mapRouteToRouteInfo(route) {\n    if ((0, shared_utils_1.isString)(route)) {\n      const defaultRequestMethod = -1;\n      return [{\n        path: (0, shared_utils_1.addLeadingSlash)(route),\n        method: defaultRequestMethod\n      }];\n    }\n\n    const routePathOrPaths = this.getRoutePath(route);\n\n    if (this.isRouteInfo(routePathOrPaths, route)) {\n      return [{\n        path: (0, shared_utils_1.addLeadingSlash)(route.path),\n        method: route.method\n      }];\n    }\n\n    const controllerPaths = this.routerExplorer.scanForPaths(Object.create(route), route.prototype);\n    const moduleRef = this.getHostModuleOfController(route);\n    const modulePath = this.getModulePath(moduleRef === null || moduleRef === void 0 ? void 0 : moduleRef.metatype);\n\n    const concatPaths = (acc, currentValue) => acc.concat(currentValue);\n\n    return [].concat(routePathOrPaths).map(routePath => controllerPaths.map(item => {\n      var _a;\n\n      return (_a = item.path) === null || _a === void 0 ? void 0 : _a.map(p => {\n        let path = modulePath !== null && modulePath !== void 0 ? modulePath : '';\n        path += this.normalizeGlobalPath(routePath) + (0, shared_utils_1.addLeadingSlash)(p);\n        return {\n          path,\n          method: item.requestMethod\n        };\n      });\n    }).reduce(concatPaths, [])).reduce(concatPaths, []);\n  }\n\n  isRouteInfo(path, objectOrClass) {\n    return (0, shared_utils_1.isUndefined)(path);\n  }\n\n  normalizeGlobalPath(path) {\n    const prefix = (0, shared_utils_1.addLeadingSlash)(path);\n    return prefix === '/' ? '' : prefix;\n  }\n\n  getRoutePath(route) {\n    return Reflect.getMetadata(constants_1.PATH_METADATA, route);\n  }\n\n  getHostModuleOfController(metatype) {\n    if (!metatype) {\n      return;\n    }\n\n    const modulesContainer = this.container.getModules();\n    const moduleRefsSet = router_module_1.targetModulesByContainer.get(modulesContainer);\n\n    if (!moduleRefsSet) {\n      return;\n    }\n\n    const modules = Array.from(modulesContainer.values()).filter(moduleRef => moduleRefsSet.has(moduleRef));\n    return modules.find(({\n      routes\n    }) => routes.has(metatype));\n  }\n\n  getModulePath(metatype) {\n    if (!metatype) {\n      return;\n    }\n\n    const modulesContainer = this.container.getModules();\n    const modulePath = Reflect.getMetadata(constants_1.MODULE_PATH + modulesContainer.applicationId, metatype);\n    return modulePath !== null && modulePath !== void 0 ? modulePath : Reflect.getMetadata(constants_1.MODULE_PATH, metatype);\n  }\n\n}\n\nexports.RoutesMapper = RoutesMapper;","map":null,"metadata":{},"sourceType":"script"}