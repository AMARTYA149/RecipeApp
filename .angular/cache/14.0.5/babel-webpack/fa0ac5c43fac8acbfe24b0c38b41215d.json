{"ast":null,"code":"/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nconst defaultContainer = new class {\n  constructor() {\n    this.instances = [];\n  }\n\n  get(someClass) {\n    let instance = this.instances.find(instance => instance.type === someClass);\n\n    if (!instance) {\n      instance = {\n        type: someClass,\n        object: new someClass()\n      };\n      this.instances.push(instance);\n    }\n\n    return instance.object;\n  }\n\n}();\nlet userContainer;\nlet userContainerOptions;\n/**\n * Sets container to be used by this library.\n */\n\nexport function useContainer(iocContainer, options) {\n  userContainer = iocContainer;\n  userContainerOptions = options;\n}\n/**\n * Gets the IOC container used by this library.\n */\n\nexport function getFromContainer(someClass) {\n  if (userContainer) {\n    try {\n      const instance = userContainer.get(someClass);\n      if (instance) return instance;\n      if (!userContainerOptions || !userContainerOptions.fallback) return instance;\n    } catch (error) {\n      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;\n    }\n  }\n\n  return defaultContainer.get(someClass);\n} //# sourceMappingURL=container.js.map","map":null,"metadata":{},"sourceType":"module"}