{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isByteLengthValidator from 'validator/lib/isByteLength';\nexport const IS_BYTE_LENGTH = 'isByteLength';\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\n\nexport function isByteLength(value, min, max) {\n  return typeof value === 'string' && isByteLengthValidator(value, {\n    min,\n    max\n  });\n}\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\n\nexport function IsByteLength(min, max, validationOptions) {\n  return ValidateBy({\n    name: IS_BYTE_LENGTH,\n    constraints: [min, max],\n    validator: {\n      validate: (value, args) => isByteLength(value, args.constraints[0], args.constraints[1]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\", validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsByteLength.js.map","map":null,"metadata":{},"sourceType":"module"}