{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UseGuards = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds guards to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseGuards` is used at the controller level, the guard will be\n * applied to every handler (method) in the controller.\n *\n * When `@UseGuards` is used at the individual handler level, the guard\n * will apply only to that specific method.\n *\n * @param guards a single guard instance or class, or a list of guard instances\n * or classes.\n *\n * @see [Guards](https://docs.nestjs.com/guards)\n *\n * @usageNotes\n * Guards can also be set up globally for all controllers and routes\n * using `app.useGlobalGuards()`.  [See here for details](https://docs.nestjs.com/guards#binding-guards)\n *\n * @publicApi\n */\n\n\nfunction UseGuards(...guards) {\n  return (target, key, descriptor) => {\n    const isGuardValid = guard => guard && ((0, shared_utils_1.isFunction)(guard) || (0, shared_utils_1.isFunction)(guard.canActivate));\n\n    if (descriptor) {\n      (0, validate_each_util_1.validateEach)(target.constructor, guards, isGuardValid, '@UseGuards', 'guard');\n      (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.GUARDS_METADATA, guards, descriptor.value);\n      return descriptor;\n    }\n\n    (0, validate_each_util_1.validateEach)(target, guards, isGuardValid, '@UseGuards', 'guard');\n    (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.GUARDS_METADATA, guards, target);\n    return target;\n  };\n}\n\nexports.UseGuards = UseGuards;","map":null,"metadata":{},"sourceType":"script"}