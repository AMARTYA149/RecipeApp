{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MiddlewareContainer = void 0;\n\nconst instance_wrapper_1 = require(\"../injector/instance-wrapper\");\n\nconst get_class_scope_1 = require(\"../helpers/get-class-scope\");\n\nclass MiddlewareContainer {\n  constructor(container) {\n    this.container = container;\n    this.middleware = new Map();\n    this.configurationSets = new Map();\n  }\n\n  getMiddlewareCollection(moduleKey) {\n    if (!this.middleware.has(moduleKey)) {\n      const moduleRef = this.container.getModuleByKey(moduleKey);\n      this.middleware.set(moduleKey, moduleRef.middlewares);\n    }\n\n    return this.middleware.get(moduleKey);\n  }\n\n  getConfigurations() {\n    return this.configurationSets;\n  }\n\n  insertConfig(configList, moduleKey) {\n    const middleware = this.getMiddlewareCollection(moduleKey);\n    const targetConfig = this.getTargetConfig(moduleKey);\n    const configurations = configList || [];\n\n    const insertMiddleware = metatype => {\n      const token = metatype;\n      middleware.set(token, new instance_wrapper_1.InstanceWrapper({\n        scope: (0, get_class_scope_1.getClassScope)(metatype),\n        name: token,\n        metatype,\n        token\n      }));\n    };\n\n    configurations.forEach(config => {\n      [].concat(config.middleware).map(insertMiddleware);\n      targetConfig.add(config);\n    });\n  }\n\n  getTargetConfig(moduleName) {\n    if (!this.configurationSets.has(moduleName)) {\n      this.configurationSets.set(moduleName, new Set());\n    }\n\n    return this.configurationSets.get(moduleName);\n  }\n\n}\n\nexports.MiddlewareContainer = MiddlewareContainer;","map":null,"metadata":{},"sourceType":"script"}