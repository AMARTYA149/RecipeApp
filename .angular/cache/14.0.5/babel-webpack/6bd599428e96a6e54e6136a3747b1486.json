{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExternalExceptionsHandler = void 0;\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst invalid_exception_filter_exception_1 = require(\"../errors/exceptions/invalid-exception-filter.exception\");\n\nconst external_exception_filter_1 = require(\"./external-exception-filter\");\n\nclass ExternalExceptionsHandler extends external_exception_filter_1.ExternalExceptionFilter {\n  constructor() {\n    super(...arguments);\n    this.filters = [];\n  }\n\n  next(exception, host) {\n    const result = this.invokeCustomFilters(exception, host);\n\n    if (result) {\n      return result;\n    }\n\n    return super.catch(exception, host);\n  }\n\n  setCustomFilters(filters) {\n    if (!Array.isArray(filters)) {\n      throw new invalid_exception_filter_exception_1.InvalidExceptionFilterException();\n    }\n\n    this.filters = filters;\n  }\n\n  invokeCustomFilters(exception, host) {\n    if ((0, shared_utils_1.isEmpty)(this.filters)) {\n      return null;\n    }\n\n    const isInstanceOf = metatype => exception instanceof metatype;\n\n    const filter = this.filters.find(({\n      exceptionMetatypes\n    }) => {\n      const typeExists = !exceptionMetatypes.length || exceptionMetatypes.some(isInstanceOf);\n      return typeExists;\n    });\n    return filter ? filter.func(exception, host) : null;\n  }\n\n}\n\nexports.ExternalExceptionsHandler = ExternalExceptionsHandler;","map":null,"metadata":{},"sourceType":"script"}