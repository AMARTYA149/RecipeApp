{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RoutePathFactory = void 0;\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst utils_1 = require(\"./utils\");\n\nclass RoutePathFactory {\n  constructor(applicationConfig) {\n    this.applicationConfig = applicationConfig;\n  }\n\n  create(metadata, requestMethod) {\n    var _a;\n\n    let paths = [''];\n    const versionOrVersions = this.getVersion(metadata);\n\n    if (versionOrVersions && ((_a = metadata.versioningOptions) === null || _a === void 0 ? void 0 : _a.type) === common_1.VersioningType.URI) {\n      const versionPrefix = this.getVersionPrefix(metadata.versioningOptions);\n\n      if (Array.isArray(versionOrVersions)) {\n        paths = (0, common_1.flatten)(paths.map(path => versionOrVersions.map(version => // Version Neutral - Do not include version in URL\n        version === common_1.VERSION_NEUTRAL ? path : `${path}/${versionPrefix}${version}`)));\n      } else {\n        // Version Neutral - Do not include version in URL\n        if (versionOrVersions !== common_1.VERSION_NEUTRAL) {\n          paths = paths.map(path => `${path}/${versionPrefix}${versionOrVersions}`);\n        }\n      }\n    }\n\n    paths = this.appendToAllIfDefined(paths, metadata.modulePath);\n    paths = this.appendToAllIfDefined(paths, metadata.ctrlPath);\n    paths = this.appendToAllIfDefined(paths, metadata.methodPath);\n\n    if (metadata.globalPrefix) {\n      paths = paths.map(path => {\n        if (this.isExcludedFromGlobalPrefix(path, requestMethod)) {\n          return path;\n        }\n\n        return (0, shared_utils_1.stripEndSlash)(metadata.globalPrefix || '') + path;\n      });\n    }\n\n    return paths.map(path => (0, shared_utils_1.addLeadingSlash)(path || '/')).map(path => path !== '/' ? (0, shared_utils_1.stripEndSlash)(path) : path);\n  }\n\n  getVersion(metadata) {\n    // The version will be either the path version or the controller version,\n    // with the pathVersion taking priority.\n    return metadata.methodVersion || metadata.controllerVersion;\n  }\n\n  getVersionPrefix(versioningOptions) {\n    const defaultPrefix = 'v';\n\n    if (versioningOptions.type === common_1.VersioningType.URI) {\n      if (versioningOptions.prefix === false) {\n        return '';\n      } else if (versioningOptions.prefix !== undefined) {\n        return versioningOptions.prefix;\n      }\n    }\n\n    return defaultPrefix;\n  }\n\n  appendToAllIfDefined(paths, fragmentToAppend) {\n    if (!fragmentToAppend) {\n      return paths;\n    }\n\n    const concatPaths = (a, b) => (0, shared_utils_1.stripEndSlash)(a) + (0, shared_utils_1.addLeadingSlash)(b);\n\n    if (Array.isArray(fragmentToAppend)) {\n      const paths2dArray = paths.map(path => fragmentToAppend.map(fragment => concatPaths(path, fragment)));\n      return (0, common_1.flatten)(paths2dArray);\n    }\n\n    return paths.map(path => concatPaths(path, fragmentToAppend));\n  }\n\n  isExcludedFromGlobalPrefix(path, requestMethod) {\n    if ((0, shared_utils_1.isUndefined)(requestMethod)) {\n      return false;\n    }\n\n    const options = this.applicationConfig.getGlobalPrefixOptions();\n    const excludedRoutes = options.exclude;\n    return Array.isArray(excludedRoutes) && (0, utils_1.isRouteExcluded)(excludedRoutes, path, requestMethod);\n  }\n\n}\n\nexports.RoutePathFactory = RoutePathFactory;","map":null,"metadata":{},"sourceType":"script"}