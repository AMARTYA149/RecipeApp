{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GuardsContextCreator = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst context_creator_1 = require(\"../helpers/context-creator\");\n\nconst constants_2 = require(\"../injector/constants\");\n\nclass GuardsContextCreator extends context_creator_1.ContextCreator {\n  constructor(container, config) {\n    super();\n    this.container = container;\n    this.config = config;\n  }\n\n  create(instance, callback, module, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    this.moduleContext = module;\n    return this.createContext(instance, callback, constants_1.GUARDS_METADATA, contextId, inquirerId);\n  }\n\n  createConcreteContext(metadata, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if ((0, shared_utils_1.isEmpty)(metadata)) {\n      return [];\n    }\n\n    return (0, iterare_1.iterate)(metadata).filter(guard => guard && (guard.name || guard.canActivate)).map(guard => this.getGuardInstance(guard, contextId, inquirerId)).filter(guard => guard && (0, shared_utils_1.isFunction)(guard.canActivate)).toArray();\n  }\n\n  getGuardInstance(metatype, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    const isObject = metatype.canActivate;\n\n    if (isObject) {\n      return metatype;\n    }\n\n    const instanceWrapper = this.getInstanceByMetatype(metatype);\n\n    if (!instanceWrapper) {\n      return null;\n    }\n\n    const instanceHost = instanceWrapper.getInstanceByContextId(contextId, inquirerId);\n    return instanceHost && instanceHost.instance;\n  }\n\n  getInstanceByMetatype(metatype) {\n    if (!this.moduleContext) {\n      return;\n    }\n\n    const collection = this.container.getModules();\n    const moduleRef = collection.get(this.moduleContext);\n\n    if (!moduleRef) {\n      return;\n    }\n\n    const injectables = moduleRef.injectables;\n    return injectables.get(metatype);\n  }\n\n  getGlobalMetadata(contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if (!this.config) {\n      return [];\n    }\n\n    const globalGuards = this.config.getGlobalGuards();\n\n    if (contextId === constants_2.STATIC_CONTEXT && !inquirerId) {\n      return globalGuards;\n    }\n\n    const scopedGuardWrappers = this.config.getGlobalRequestGuards();\n    const scopedGuards = (0, iterare_1.iterate)(scopedGuardWrappers).map(wrapper => wrapper.getInstanceByContextId(contextId, inquirerId)).filter(host => !!host).map(host => host.instance).toArray();\n    return globalGuards.concat(scopedGuards);\n  }\n\n}\n\nexports.GuardsContextCreator = GuardsContextCreator;","map":null,"metadata":{},"sourceType":"script"}