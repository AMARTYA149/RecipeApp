{"ast":null,"code":"\"use strict\";\n\nvar RouterModule_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RouterModule = exports.targetModulesByContainer = exports.ROUTES = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst modules_container_1 = require(\"../injector/modules-container\");\n\nconst utils_1 = require(\"./utils\");\n\nexports.ROUTES = Symbol('ROUTES');\nexports.targetModulesByContainer = new WeakMap();\n/**\n * @publicApi\n */\n\nlet RouterModule = RouterModule_1 = class RouterModule {\n  constructor(modulesContainer, routes) {\n    this.modulesContainer = modulesContainer;\n    this.routes = routes;\n    this.routes = this.deepCloneRoutes(routes);\n    this.initialize();\n  }\n\n  static register(routes) {\n    return {\n      module: RouterModule_1,\n      providers: [{\n        provide: exports.ROUTES,\n        useValue: routes\n      }]\n    };\n  }\n\n  deepCloneRoutes(routes) {\n    return routes.map(routeOrType => {\n      if (typeof routeOrType === 'function') {\n        return routeOrType;\n      }\n\n      if (routeOrType.children) {\n        return Object.assign(Object.assign({}, routeOrType), {\n          children: this.deepCloneRoutes(routeOrType.children)\n        });\n      }\n\n      return Object.assign({}, routeOrType);\n    });\n  }\n\n  initialize() {\n    const flattenedRoutes = (0, utils_1.flattenRoutePaths)(this.routes);\n    flattenedRoutes.forEach(route => {\n      const modulePath = (0, shared_utils_1.normalizePath)(route.path);\n      this.registerModulePathMetadata(route.module, modulePath);\n      this.updateTargetModulesCache(route.module);\n    });\n  }\n\n  registerModulePathMetadata(moduleCtor, modulePath) {\n    Reflect.defineMetadata(constants_1.MODULE_PATH + this.modulesContainer.applicationId, modulePath, moduleCtor);\n  }\n\n  updateTargetModulesCache(moduleCtor) {\n    let moduleClassSet;\n\n    if (exports.targetModulesByContainer.has(this.modulesContainer)) {\n      moduleClassSet = exports.targetModulesByContainer.get(this.modulesContainer);\n    } else {\n      moduleClassSet = new WeakSet();\n      exports.targetModulesByContainer.set(this.modulesContainer, moduleClassSet);\n    }\n\n    const moduleRef = Array.from(this.modulesContainer.values()).find(item => (item === null || item === void 0 ? void 0 : item.metatype) === moduleCtor);\n\n    if (!moduleRef) {\n      return;\n    }\n\n    moduleClassSet.add(moduleRef);\n  }\n\n};\nRouterModule = RouterModule_1 = tslib_1.__decorate([(0, common_1.Module)({}), tslib_1.__param(1, (0, common_1.Inject)(exports.ROUTES)), tslib_1.__metadata(\"design:paramtypes\", [modules_container_1.ModulesContainer, Array])], RouterModule);\nexports.RouterModule = RouterModule;","map":null,"metadata":{},"sourceType":"script"}