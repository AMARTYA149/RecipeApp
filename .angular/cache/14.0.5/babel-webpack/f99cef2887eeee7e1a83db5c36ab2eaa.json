{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/amartya_aishwarya/Desktop/nextjs-angular/RecipeApp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstanceLoader = void 0;\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst messages_1 = require(\"../helpers/messages\");\n\nconst injector_1 = require(\"./injector\");\n\nconst internal_core_module_1 = require(\"./internal-core-module\");\n\nclass InstanceLoader {\n  constructor(container, logger = new common_1.Logger(InstanceLoader.name, {\n    timestamp: true\n  })) {\n    this.container = container;\n    this.logger = logger;\n    this.injector = new injector_1.Injector();\n  }\n\n  createInstancesOfDependencies(modules = this.container.getModules()) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.createPrototypes(modules);\n\n      yield _this.createInstances(modules);\n    })();\n  }\n\n  createPrototypes(modules) {\n    modules.forEach(moduleRef => {\n      this.createPrototypesOfProviders(moduleRef);\n      this.createPrototypesOfInjectables(moduleRef);\n      this.createPrototypesOfControllers(moduleRef);\n    });\n  }\n\n  createInstances(modules) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield Promise.all([...modules.values()].map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (moduleRef) {\n          yield _this2.createInstancesOfProviders(moduleRef);\n          yield _this2.createInstancesOfInjectables(moduleRef);\n          yield _this2.createInstancesOfControllers(moduleRef);\n          const {\n            name\n          } = moduleRef.metatype;\n          _this2.isModuleWhitelisted(name) && _this2.logger.log((0, messages_1.MODULE_INIT_MESSAGE)`${name}`);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n\n  createPrototypesOfProviders(moduleRef) {\n    const {\n      providers\n    } = moduleRef;\n    providers.forEach(wrapper => this.injector.loadPrototype(wrapper, providers));\n  }\n\n  createInstancesOfProviders(moduleRef) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        providers\n      } = moduleRef;\n      const wrappers = [...providers.values()];\n      yield Promise.all(wrappers.map(item => _this3.injector.loadProvider(item, moduleRef)));\n    })();\n  }\n\n  createPrototypesOfControllers(moduleRef) {\n    const {\n      controllers\n    } = moduleRef;\n    controllers.forEach(wrapper => this.injector.loadPrototype(wrapper, controllers));\n  }\n\n  createInstancesOfControllers(moduleRef) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        controllers\n      } = moduleRef;\n      const wrappers = [...controllers.values()];\n      yield Promise.all(wrappers.map(item => _this4.injector.loadController(item, moduleRef)));\n    })();\n  }\n\n  createPrototypesOfInjectables(moduleRef) {\n    const {\n      injectables\n    } = moduleRef;\n    injectables.forEach(wrapper => this.injector.loadPrototype(wrapper, injectables));\n  }\n\n  createInstancesOfInjectables(moduleRef) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        injectables\n      } = moduleRef;\n      const wrappers = [...injectables.values()];\n      yield Promise.all(wrappers.map(item => _this5.injector.loadInjectable(item, moduleRef)));\n    })();\n  }\n\n  isModuleWhitelisted(name) {\n    return name !== internal_core_module_1.InternalCoreModule.name;\n  }\n\n}\n\nexports.InstanceLoader = InstanceLoader;","map":null,"metadata":{},"sourceType":"script"}