{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reflector = void 0;\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n/**\n * Helper class providing Nest reflection capabilities.\n *\n * @see [Reflection](https://docs.nestjs.com/guards#putting-it-all-together)\n *\n * @publicApi\n */\n\n\nclass Reflector {\n  /**\n   * Retrieve metadata for a specified key for a specified target.\n   *\n   * @example\n   * `const roles = this.reflector.get<string[]>('roles', context.getHandler());`\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param target context (decorated object) to retrieve metadata from\n   *\n   */\n  get(metadataKey, target) {\n    return Reflect.getMetadata(metadataKey, target);\n  }\n  /**\n   * Retrieve metadata for a specified key for a specified set of targets.\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n\n\n  getAll(metadataKey, targets) {\n    return (targets || []).map(target => Reflect.getMetadata(metadataKey, target));\n  }\n  /**\n   * Retrieve metadata for a specified key for a specified set of targets and merge results.\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n\n\n  getAllAndMerge(metadataKey, targets) {\n    const metadataCollection = this.getAll(metadataKey, targets).filter(item => item !== undefined);\n\n    if ((0, shared_utils_1.isEmpty)(metadataCollection)) {\n      return metadataCollection;\n    }\n\n    return metadataCollection.reduce((a, b) => {\n      if (Array.isArray(a)) {\n        return a.concat(b);\n      }\n\n      if ((0, shared_utils_1.isObject)(a) && (0, shared_utils_1.isObject)(b)) {\n        return Object.assign(Object.assign({}, a), b);\n      }\n\n      return [a, b];\n    });\n  }\n  /**\n   * Retrieve metadata for a specified key for a specified set of targets and return a first not undefined value.\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n\n\n  getAllAndOverride(metadataKey, targets) {\n    const metadataCollection = this.getAll(metadataKey, targets).filter(item => item !== undefined);\n    return metadataCollection[0];\n  }\n\n}\n\nexports.Reflector = Reflector;","map":null,"metadata":{},"sourceType":"script"}