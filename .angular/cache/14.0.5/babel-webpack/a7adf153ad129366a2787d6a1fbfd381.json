{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst axios_1 = require(\"axios\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst decorators_1 = require(\"../decorators\");\n\nconst services_1 = require(\"../services\");\n\nconst http_constants_1 = require(\"./http.constants\");\n/**\n * @deprecated \"HttpModule\" (from the \"@nestjs/common\" package) is deprecated and will be removed in the next major release. Please, use the \"@nestjs/axios\" package instead.\n */\n\n\nlet HttpService = class HttpService {\n  constructor(instance = axios_1.default) {\n    this.instance = instance;\n    this.logger = new services_1.Logger(HttpService.name);\n    this.logger.warn('DEPRECATED! \"HttpModule\" (from the \"@nestjs/common\" package) is deprecated and will be removed in the next major release. Please, use the \"@nestjs/axios\" package instead.');\n  }\n\n  request(config) {\n    return this.makeObservable(this.instance.request, config);\n  }\n\n  get(url, config) {\n    return this.makeObservable(this.instance.get, url, config);\n  }\n\n  delete(url, config) {\n    return this.makeObservable(this.instance.delete, url, config);\n  }\n\n  head(url, config) {\n    return this.makeObservable(this.instance.head, url, config);\n  }\n\n  post(url, data, config) {\n    return this.makeObservable(this.instance.post, url, data, config);\n  }\n\n  put(url, data, config) {\n    return this.makeObservable(this.instance.put, url, data, config);\n  }\n\n  patch(url, data, config) {\n    return this.makeObservable(this.instance.patch, url, data, config);\n  }\n\n  get axiosRef() {\n    return this.instance;\n  }\n\n  makeObservable(axios, ...args) {\n    return new rxjs_1.Observable(subscriber => {\n      const config = Object.assign({}, args[args.length - 1] || {});\n      let cancelSource;\n\n      if (!config.cancelToken) {\n        cancelSource = axios_1.default.CancelToken.source();\n        config.cancelToken = cancelSource.token;\n      }\n\n      axios(...args).then(res => {\n        subscriber.next(res);\n        subscriber.complete();\n      }).catch(err => {\n        subscriber.error(err);\n      });\n      return () => {\n        if (config.responseType === 'stream') {\n          return;\n        }\n\n        if (cancelSource) {\n          cancelSource.cancel();\n        }\n      };\n    });\n  }\n\n};\nHttpService = tslib_1.__decorate([tslib_1.__param(0, (0, decorators_1.Inject)(http_constants_1.AXIOS_INSTANCE_TOKEN)), tslib_1.__metadata(\"design:paramtypes\", [Function])], HttpService);\nexports.HttpService = HttpService;","map":null,"metadata":{},"sourceType":"script"}