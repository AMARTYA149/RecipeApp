{"ast":null,"code":"/**\n * Convert the constraint to a string to be shown in an error\n */\nexport function constraintToString(constraint) {\n  if (Array.isArray(constraint)) {\n    return constraint.join(', ');\n  }\n\n  return `${constraint}`;\n}\nexport class ValidationUtils {\n  static replaceMessageSpecialTokens(message, validationArguments) {\n    let messageString;\n\n    if (message instanceof Function) {\n      messageString = message(validationArguments);\n    } else if (typeof message === 'string') {\n      messageString = message;\n    }\n\n    if (messageString && Array.isArray(validationArguments.constraints)) {\n      validationArguments.constraints.forEach((constraint, index) => {\n        messageString = messageString.replace(new RegExp(`\\\\$constraint${index + 1}`, 'g'), constraintToString(constraint));\n      });\n    }\n\n    if (messageString && validationArguments.value !== undefined && validationArguments.value !== null && typeof validationArguments.value === 'string') messageString = messageString.replace(/\\$value/g, validationArguments.value);\n    if (messageString) messageString = messageString.replace(/\\$property/g, validationArguments.property);\n    if (messageString) messageString = messageString.replace(/\\$target/g, validationArguments.targetName);\n    return messageString;\n  }\n\n} //# sourceMappingURL=ValidationUtils.js.map","map":null,"metadata":{},"sourceType":"module"}