{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/amartya_aishwarya/Desktop/nextjs-angular/RecipeApp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LazyModuleLoader = void 0;\n\nconst module_ref_1 = require(\"./module-ref\");\n\nclass LazyModuleLoader {\n  constructor(dependenciesScanner, instanceLoader, moduleCompiler, modulesContainer) {\n    this.dependenciesScanner = dependenciesScanner;\n    this.instanceLoader = instanceLoader;\n    this.moduleCompiler = moduleCompiler;\n    this.modulesContainer = modulesContainer;\n  }\n\n  load(loaderFn) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const moduleClassOrDynamicDefinition = yield loaderFn();\n      const moduleInstances = yield _this.dependenciesScanner.scanForModules(moduleClassOrDynamicDefinition);\n\n      if (moduleInstances.length === 0) {\n        // The module has been loaded already. In this case, we must\n        // retrieve a module reference from the exising container.\n        const {\n          token\n        } = yield _this.moduleCompiler.compile(moduleClassOrDynamicDefinition);\n\n        const moduleInstance = _this.modulesContainer.get(token);\n\n        return moduleInstance && _this.getTargetModuleRef(moduleInstance);\n      }\n\n      const lazyModulesContainer = _this.createLazyModulesContainer(moduleInstances);\n\n      yield _this.dependenciesScanner.scanModulesForDependencies(lazyModulesContainer);\n      yield _this.instanceLoader.createInstancesOfDependencies(lazyModulesContainer);\n      const [targetModule] = moduleInstances;\n      return _this.getTargetModuleRef(targetModule);\n    })();\n  }\n\n  createLazyModulesContainer(moduleInstances) {\n    moduleInstances = Array.from(new Set(moduleInstances));\n    return new Map(moduleInstances.map(ref => [ref.token, ref]));\n  }\n\n  getTargetModuleRef(moduleInstance) {\n    const moduleRefInstanceWrapper = moduleInstance.getProviderByKey(module_ref_1.ModuleRef);\n    return moduleRefInstanceWrapper.instance;\n  }\n\n}\n\nexports.LazyModuleLoader = LazyModuleLoader;","map":null,"metadata":{},"sourceType":"script"}