{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\nexport const MIN_LENGTH = 'minLength';\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\n\nexport function minLength(value, min) {\n  return typeof value === 'string' && isLengthValidator(value, {\n    min\n  });\n}\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\n\nexport function MinLength(min, validationOptions) {\n  return ValidateBy({\n    name: MIN_LENGTH,\n    constraints: [min],\n    validator: {\n      validate: (value, args) => minLength(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be longer than or equal to $constraint1 characters', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=MinLength.js.map","map":null,"metadata":{},"sourceType":"module"}