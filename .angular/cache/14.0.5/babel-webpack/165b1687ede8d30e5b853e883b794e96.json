{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExceptionFilter = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst constants_1 = require(\"../constants\");\n\nconst http_adapter_host_1 = require(\"../helpers/http-adapter-host\");\n\nclass BaseExceptionFilter {\n  constructor(applicationRef) {\n    this.applicationRef = applicationRef;\n  }\n\n  catch(exception, host) {\n    const applicationRef = this.applicationRef || this.httpAdapterHost && this.httpAdapterHost.httpAdapter;\n\n    if (!(exception instanceof common_1.HttpException)) {\n      return this.handleUnknownError(exception, host, applicationRef);\n    }\n\n    const res = exception.getResponse();\n    const message = (0, shared_utils_1.isObject)(res) ? res : {\n      statusCode: exception.getStatus(),\n      message: res\n    };\n    applicationRef.reply(host.getArgByIndex(1), message, exception.getStatus());\n  }\n\n  handleUnknownError(exception, host, applicationRef) {\n    const body = this.isHttpError(exception) ? {\n      statusCode: exception.statusCode,\n      message: exception.message\n    } : {\n      statusCode: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n      message: constants_1.MESSAGES.UNKNOWN_EXCEPTION_MESSAGE\n    };\n    applicationRef.reply(host.getArgByIndex(1), body, body.statusCode);\n\n    if (this.isExceptionObject(exception)) {\n      return BaseExceptionFilter.logger.error(exception.message, exception.stack);\n    }\n\n    return BaseExceptionFilter.logger.error(exception);\n  }\n\n  isExceptionObject(err) {\n    return (0, shared_utils_1.isObject)(err) && !!err.message;\n  }\n  /**\n   * Checks if the thrown error comes from the \"http-errors\" library.\n   * @param err error object\n   */\n\n\n  isHttpError(err) {\n    return (err === null || err === void 0 ? void 0 : err.statusCode) && (err === null || err === void 0 ? void 0 : err.message);\n  }\n\n}\n\nBaseExceptionFilter.logger = new common_1.Logger('ExceptionsHandler');\n\ntslib_1.__decorate([(0, common_1.Optional)(), (0, common_1.Inject)(), tslib_1.__metadata(\"design:type\", http_adapter_host_1.HttpAdapterHost)], BaseExceptionFilter.prototype, \"httpAdapterHost\", void 0);\n\nexports.BaseExceptionFilter = BaseExceptionFilter;","map":null,"metadata":{},"sourceType":"script"}