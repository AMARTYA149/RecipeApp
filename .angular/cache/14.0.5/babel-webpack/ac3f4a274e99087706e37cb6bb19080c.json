{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExternalExceptionFilterContext = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst constants_2 = require(\"../injector/constants\");\n\nconst base_exception_filter_context_1 = require(\"./base-exception-filter-context\");\n\nconst external_exceptions_handler_1 = require(\"./external-exceptions-handler\");\n\nconst iterare_1 = require(\"iterare\");\n\nclass ExternalExceptionFilterContext extends base_exception_filter_context_1.BaseExceptionFilterContext {\n  constructor(container, config) {\n    super(container);\n    this.config = config;\n  }\n\n  create(instance, callback, module, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    this.moduleContext = module;\n    const exceptionHandler = new external_exceptions_handler_1.ExternalExceptionsHandler();\n    const filters = this.createContext(instance, callback, constants_1.EXCEPTION_FILTERS_METADATA, contextId, inquirerId);\n\n    if ((0, shared_utils_1.isEmpty)(filters)) {\n      return exceptionHandler;\n    }\n\n    exceptionHandler.setCustomFilters(filters.reverse());\n    return exceptionHandler;\n  }\n\n  getGlobalMetadata(contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if (!this.config) {\n      return [];\n    }\n\n    const globalFilters = this.config.getGlobalFilters();\n\n    if (contextId === constants_2.STATIC_CONTEXT && !inquirerId) {\n      return globalFilters;\n    }\n\n    const scopedFilterWrappers = this.config.getGlobalRequestFilters();\n    const scopedFilters = (0, iterare_1.iterate)(scopedFilterWrappers).map(wrapper => wrapper.getInstanceByContextId(contextId, inquirerId)).filter(host => !!host).map(host => host.instance).toArray();\n    return globalFilters.concat(scopedFilters);\n  }\n\n}\n\nexports.ExternalExceptionFilterContext = ExternalExceptionFilterContext;","map":null,"metadata":{},"sourceType":"script"}