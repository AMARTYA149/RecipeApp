{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isRgbColorValidator from 'validator/lib/isRgbColor';\nexport const IS_RGB_COLOR = 'isRgbColor';\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\n\nexport function isRgbColor(value, includePercentValues) {\n  return typeof value === 'string' && isRgbColorValidator(value, includePercentValues);\n}\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\n\nexport function IsRgbColor(includePercentValues, validationOptions) {\n  return ValidateBy({\n    name: IS_RGB_COLOR,\n    constraints: [includePercentValues],\n    validator: {\n      validate: (value, args) => isRgbColor(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be RGB color', validationOptions)\n    }\n  }, validationOptions);\n} //# sourceMappingURL=IsRgbColor.js.map","map":null,"metadata":{},"sourceType":"module"}