{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContextUtils = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst execution_context_host_1 = require(\"./execution-context-host\");\n\nclass ContextUtils {\n  mapParamType(key) {\n    const keyPair = key.split(':');\n    return keyPair[0];\n  }\n\n  reflectCallbackParamtypes(instance, methodName) {\n    return Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, instance, methodName);\n  }\n\n  reflectCallbackMetadata(instance, methodName, metadataKey) {\n    return Reflect.getMetadata(metadataKey, instance.constructor, methodName);\n  }\n\n  reflectPassthrough(instance, methodName) {\n    return Reflect.getMetadata(constants_1.RESPONSE_PASSTHROUGH_METADATA, instance.constructor, methodName);\n  }\n\n  getArgumentsLength(keys, metadata) {\n    return keys.length ? Math.max(...keys.map(key => metadata[key].index)) + 1 : 0;\n  }\n\n  createNullArray(length) {\n    const a = new Array(length);\n\n    for (let i = 0; i < length; ++i) a[i] = undefined;\n\n    return a;\n  }\n\n  mergeParamsMetatypes(paramsProperties, paramtypes) {\n    if (!paramtypes) {\n      return paramsProperties;\n    }\n\n    return paramsProperties.map(param => Object.assign(Object.assign({}, param), {\n      metatype: paramtypes[param.index]\n    }));\n  }\n\n  getCustomFactory(factory, data, contextFactory) {\n    return (0, shared_utils_1.isFunction)(factory) ? (...args) => factory(data, contextFactory(args)) : () => null;\n  }\n\n  getContextFactory(contextType, instance, callback) {\n    const contextFactory = args => {\n      const ctx = new execution_context_host_1.ExecutionContextHost(args, instance && instance.constructor, callback);\n      ctx.setType(contextType);\n      return ctx;\n    };\n\n    return contextFactory;\n  }\n\n}\n\nexports.ContextUtils = ContextUtils;","map":null,"metadata":{},"sourceType":"script"}