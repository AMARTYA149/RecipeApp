{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const ARRAY_UNIQUE = 'arrayUnique';\n/**\n * Checks if all array's values are unique. Comparison for objects is reference-based.\n * If null or undefined is given then this function returns false.\n */\n\nexport function arrayUnique(array, identifier) {\n  if (!Array.isArray(array)) return false;\n\n  if (identifier) {\n    array = array.map(o => o != null ? identifier(o) : o);\n  }\n\n  const uniqueItems = array.filter((a, b, c) => c.indexOf(a) === b);\n  return array.length === uniqueItems.length;\n}\n/**\n * Checks if all array's values are unique. Comparison for objects is reference-based.\n * If null or undefined is given then this function returns false.\n */\n\nexport function ArrayUnique(identifierOrOptions, validationOptions) {\n  const identifier = typeof identifierOrOptions === 'function' ? identifierOrOptions : undefined;\n  const options = typeof identifierOrOptions !== 'function' ? identifierOrOptions : validationOptions;\n  return ValidateBy({\n    name: ARRAY_UNIQUE,\n    validator: {\n      validate: (value, args) => arrayUnique(value, identifier),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + \"All $property's elements must be unique\", options)\n    }\n  }, options);\n} //# sourceMappingURL=ArrayUnique.js.map","map":null,"metadata":{},"sourceType":"module"}