{"ast":null,"code":"\"use strict\";\n\nvar ConsoleLogger_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConsoleLogger = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\n\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\n\nconst cli_colors_util_1 = require(\"../utils/cli-colors.util\");\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n\nconst utils_1 = require(\"./utils\");\n\nconst DEFAULT_LOG_LEVELS = ['log', 'error', 'warn', 'debug', 'verbose'];\nlet ConsoleLogger = ConsoleLogger_1 = class ConsoleLogger {\n  constructor(context, options = {}) {\n    this.context = context;\n    this.options = options;\n\n    if (!options.logLevels) {\n      options.logLevels = DEFAULT_LOG_LEVELS;\n    }\n\n    if (context) {\n      this.originalContext = context;\n    }\n  }\n\n  log(message, ...optionalParams) {\n    if (!this.isLevelEnabled('log')) {\n      return;\n    }\n\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'log');\n  }\n\n  error(message, ...optionalParams) {\n    if (!this.isLevelEnabled('error')) {\n      return;\n    }\n\n    const {\n      messages,\n      context,\n      stack\n    } = this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'error', 'stderr');\n    this.printStackTrace(stack);\n  }\n\n  warn(message, ...optionalParams) {\n    if (!this.isLevelEnabled('warn')) {\n      return;\n    }\n\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'warn');\n  }\n\n  debug(message, ...optionalParams) {\n    if (!this.isLevelEnabled('debug')) {\n      return;\n    }\n\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'debug');\n  }\n\n  verbose(message, ...optionalParams) {\n    if (!this.isLevelEnabled('verbose')) {\n      return;\n    }\n\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'verbose');\n  }\n  /**\n   * Set log levels\n   * @param levels log levels\n   */\n\n\n  setLogLevels(levels) {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    this.options.logLevels = levels;\n  }\n  /**\n   * Set logger context\n   * @param context context\n   */\n\n\n  setContext(context) {\n    this.context = context;\n  }\n  /**\n   * Resets the logger context to the value that was passed in the constructor.\n   */\n\n\n  resetContext() {\n    this.context = this.originalContext;\n  }\n\n  isLevelEnabled(level) {\n    var _a;\n\n    const logLevels = (_a = this.options) === null || _a === void 0 ? void 0 : _a.logLevels;\n    return (0, utils_1.isLogLevelEnabled)(level, logLevels);\n  }\n\n  getTimestamp() {\n    const localeStringOptions = {\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      day: '2-digit',\n      month: '2-digit'\n    };\n    return new Date(Date.now()).toLocaleString(undefined, localeStringOptions);\n  }\n\n  printMessages(messages, context = '', logLevel = 'log', writeStreamType) {\n    messages.forEach(message => {\n      const pidMessage = this.formatPid(process.pid);\n      const contextMessage = context ? (0, cli_colors_util_1.yellow)(`[${context}] `) : '';\n      const timestampDiff = this.updateAndGetTimestampDiff();\n      const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\n      const formatedMessage = this.formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff);\n      process[writeStreamType !== null && writeStreamType !== void 0 ? writeStreamType : 'stdout'].write(formatedMessage);\n    });\n  }\n\n  formatPid(pid) {\n    return `[Nest] ${pid}  - `;\n  }\n\n  formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff) {\n    const output = this.stringifyMessage(message, logLevel);\n    pidMessage = this.colorize(pidMessage, logLevel);\n    formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\n    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n  }\n\n  stringifyMessage(message, logLevel) {\n    return (0, shared_utils_1.isPlainObject)(message) ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(message, (key, value) => typeof value === 'bigint' ? value.toString() : value, 2)}\\n` : this.colorize(message, logLevel);\n  }\n\n  colorize(message, logLevel) {\n    const color = this.getColorByLogLevel(logLevel);\n    return color(message);\n  }\n\n  printStackTrace(stack) {\n    if (!stack) {\n      return;\n    }\n\n    process.stderr.write(`${stack}\\n`);\n  }\n\n  updateAndGetTimestampDiff() {\n    var _a;\n\n    const includeTimestamp = ConsoleLogger_1.lastTimestampAt && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.timestamp);\n    const result = includeTimestamp ? (0, cli_colors_util_1.yellow)(` +${Date.now() - ConsoleLogger_1.lastTimestampAt}ms`) : '';\n    ConsoleLogger_1.lastTimestampAt = Date.now();\n    return result;\n  }\n\n  getContextAndMessagesToPrint(args) {\n    if ((args === null || args === void 0 ? void 0 : args.length) <= 1) {\n      return {\n        messages: args,\n        context: this.context\n      };\n    }\n\n    const lastElement = args[args.length - 1];\n    const isContext = (0, shared_utils_1.isString)(lastElement);\n\n    if (!isContext) {\n      return {\n        messages: args,\n        context: this.context\n      };\n    }\n\n    return {\n      context: lastElement,\n      messages: args.slice(0, args.length - 1)\n    };\n  }\n\n  getContextAndStackAndMessagesToPrint(args) {\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint(args);\n\n    if ((messages === null || messages === void 0 ? void 0 : messages.length) <= 1) {\n      return {\n        messages,\n        context\n      };\n    }\n\n    const lastElement = messages[messages.length - 1];\n    const isStack = (0, shared_utils_1.isString)(lastElement);\n\n    if (!isStack) {\n      return {\n        messages,\n        context\n      };\n    }\n\n    return {\n      stack: lastElement,\n      messages: messages.slice(0, messages.length - 1),\n      context\n    };\n  }\n\n  getColorByLogLevel(level) {\n    switch (level) {\n      case 'debug':\n        return cli_colors_util_1.clc.magentaBright;\n\n      case 'warn':\n        return cli_colors_util_1.clc.yellow;\n\n      case 'error':\n        return cli_colors_util_1.clc.red;\n\n      case 'verbose':\n        return cli_colors_util_1.clc.cyanBright;\n\n      default:\n        return cli_colors_util_1.clc.green;\n    }\n  }\n\n};\nConsoleLogger = ConsoleLogger_1 = tslib_1.__decorate([(0, injectable_decorator_1.Injectable)(), tslib_1.__param(0, (0, optional_decorator_1.Optional)()), tslib_1.__param(1, (0, optional_decorator_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [String, Object])], ConsoleLogger);\nexports.ConsoleLogger = ConsoleLogger;","map":null,"metadata":{},"sourceType":"script"}