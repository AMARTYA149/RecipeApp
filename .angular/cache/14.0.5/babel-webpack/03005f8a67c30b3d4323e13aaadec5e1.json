{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpException = void 0;\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\n\n\nclass HttpException extends Error {\n  /**\n   * Instantiate a plain HTTP Exception.\n   *\n   * @example\n   * `throw new HttpException()`\n   *\n   * @usageNotes\n   * The constructor arguments define the response and the HTTP response status code.\n   * - The `response` argument (required) defines the JSON response body.\n   * - The `status` argument (required) defines the HTTP Status Code.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: the Http Status Code.\n   * - `message`: a short description of the HTTP error by default; override this\n   * by supplying a string in the `response` parameter.\n   *\n   * To override the entire JSON response body, pass an object to the `createBody`\n   * method. Nest will serialize the object and return it as the JSON response body.\n   *\n   * The `status` argument is required, and should be a valid HTTP status code.\n   * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n   *\n   * @param response string or object describing the error condition.\n   * @param status HTTP response status code.\n   */\n  constructor(response, status) {\n    super();\n    this.response = response;\n    this.status = status;\n    this.initMessage();\n    this.initName();\n  }\n\n  initMessage() {\n    if ((0, shared_utils_1.isString)(this.response)) {\n      this.message = this.response;\n    } else if ((0, shared_utils_1.isObject)(this.response) && (0, shared_utils_1.isString)(this.response.message)) {\n      this.message = this.response.message;\n    } else if (this.constructor) {\n      this.message = this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g).join(' ');\n    }\n  }\n\n  initName() {\n    this.name = this.constructor.name;\n  }\n\n  getResponse() {\n    return this.response;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  static createBody(objectOrError, description, statusCode) {\n    if (!objectOrError) {\n      return {\n        statusCode,\n        message: description\n      };\n    }\n\n    return (0, shared_utils_1.isObject)(objectOrError) && !Array.isArray(objectOrError) ? objectOrError : {\n      statusCode,\n      message: objectOrError,\n      error: description\n    };\n  }\n\n}\n\nexports.HttpException = HttpException;","map":null,"metadata":{},"sourceType":"script"}