{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSymbol = exports.isEmpty = exports.isNil = exports.isConstructor = exports.isNumber = exports.isString = exports.isFunction = exports.stripEndSlash = exports.normalizePath = exports.validatePath = exports.addLeadingSlash = exports.isPlainObject = exports.isObject = exports.isUndefined = void 0;\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nconst isUndefined = obj => typeof obj === 'undefined';\n\nexports.isUndefined = isUndefined;\n\nconst isObject = fn => !(0, exports.isNil)(fn) && typeof fn === 'object';\n\nexports.isObject = isObject;\n\nconst isPlainObject = fn => {\n  if (!(0, exports.isObject)(fn)) {\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(fn);\n\n  if (proto === null) {\n    return true;\n  }\n\n  const ctor = Object.prototype.hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof ctor === 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n};\n\nexports.isPlainObject = isPlainObject;\n\nconst addLeadingSlash = path => path && typeof path === 'string' ? path.charAt(0) !== '/' ? '/' + path : path : '';\n\nexports.addLeadingSlash = addLeadingSlash;\n/**\n * Deprecated. Use the \"addLeadingSlash\" function instead.\n * @deprecated\n */\n\nexports.validatePath = exports.addLeadingSlash;\n\nconst normalizePath = path => path ? path.startsWith('/') ? ('/' + path.replace(/\\/+$/, '')).replace(/\\/+/g, '/') : '/' + path.replace(/\\/+$/, '') : '/';\n\nexports.normalizePath = normalizePath;\n\nconst stripEndSlash = path => path[path.length - 1] === '/' ? path.slice(0, path.length - 1) : path;\n\nexports.stripEndSlash = stripEndSlash;\n\nconst isFunction = val => typeof val === 'function';\n\nexports.isFunction = isFunction;\n\nconst isString = val => typeof val === 'string';\n\nexports.isString = isString;\n\nconst isNumber = val => typeof val === 'number';\n\nexports.isNumber = isNumber;\n\nconst isConstructor = val => val === 'constructor';\n\nexports.isConstructor = isConstructor;\n\nconst isNil = val => (0, exports.isUndefined)(val) || val === null;\n\nexports.isNil = isNil;\n\nconst isEmpty = array => !(array && array.length > 0);\n\nexports.isEmpty = isEmpty;\n\nconst isSymbol = val => typeof val === 'symbol';\n\nexports.isSymbol = isSymbol;","map":null,"metadata":{},"sourceType":"script"}